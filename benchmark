#!/bin/bash
# Simple benchmark which compares speed with other tools

if [ ! -f "./repeater" ]; then
  go build .
fi

max_am=$1

if [ -z "$max_am" ]; then
  max_am=10000
fi

if [ -z "$cmd" ]; then
  cmd="ls"
fi

function repeater_for_loop() {
  local n=$1
  shift
  local cmd="$@"
  for i in $(seq $n); do
    /bin/bash -c "$cmd" > /dev/null 
  done
}

printf "=== Benchmark start. Cmd: $cmd ===

Within each run segmented with '== am runs: <run-am>'
different technologies will repeat the command.

You can set a custom command to benchmark by passing in any argument."
shift
cmd="$@"
echo
for ((i = 10; i <= $max_am; i="${i}0")); do
  echo "--------
== am runs: $i"
  printf "bash for loop"
  time repeater_for_loop $i $cmd 
  printf "repeater 10 workers"
  time ./repeater -n $i -statistics=false -file="r_out_${i}" -output=FILE -w 10 $cmd  > /dev/null
  if command -v parallel &> /dev/null; then
    printf "gnu parallel with 10 parallel jobs"
    time seq -w 0 $(( i - 1)) | parallel -n0 $cmd > ./p_out_${i}
    # Diff to ensure output is the same = same operations have been done
    diff ./r_out_${i} ./p_out_${i}
    rm ./p_out_${i}
  fi
  rm ./r_out_${i} 
done


# Clean up the binary
rm repeater
